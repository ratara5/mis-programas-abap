*&---------------------------------------------------------------------*
*& Report  ZFI_CONSUMIR_SALDO
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zfi_consumir_saldo.
*******
TABLES: bsid.
SELECT-OPTIONS: so_saknr FOR bsid-saknr DEFAULT '2805050501' NO-DISPLAY.

SELECTION-SCREEN BEGIN OF BLOCK uno WITH FRAME TITLE text-001.
PARAMETERS: p_fecha     TYPE datum DEFAULT sy-datum.
SELECTION-SCREEN END OF BLOCK uno.

TYPES: BEGIN OF ty_nc,
         username               TYPE string,
         password               TYPE string,
         aplicationid           TYPE string,
         id_cliente             TYPE string,
         numero_documento       TYPE string,
         tipo_documento         TYPE numc01,
         fecha_creacion         TYPE string,
         valor                  TYPE numc10,
         descripcion_movimiento TYPE string,
       END OF ty_nc,
       BEGIN OF ty_partida,
         kunnr TYPE bsid-kunnr,
         belnr TYPE bsid-belnr,
         vbeln TYPE bsid-vbeln,
         blart TYPE bsid-blart,
         fkart TYPE vbrk-fkart,
         kkber TYPE bsid-kkber,
         wrbtr TYPE bsid-wrbtr,
         waers TYPE bsid-waers,
         shkzg TYPE bsid-shkzg,
       END OF ty_partida.
DATA: lv_string           TYPE string.
DATA: lv_str_json         TYPE string.
DATA: lv_str_token        TYPE string.
DATA: lv_api_rest_respond TYPE string.
DATA: json_nc             TYPE ty_nc.
DATA: wf_user TYPE string .
DATA: wf_password TYPE string .
DATA: rlength TYPE i,
      txlen   TYPE string.
DATA: lo_http_client TYPE REF TO if_http_client .
DATA: wf_string TYPE string .
DATA: wf_string1 TYPE string .
DATA: wf_proxy TYPE string,
      wf_port  TYPE string,
      lv_url   TYPE string,
      lv_token TYPE string.
DATA: lo_rest_client TYPE REF TO cl_rest_http_client,
      lo_response    TYPE REF TO if_rest_entity,
      lv_http_status TYPE i.
TYPES: BEGIN OF ty_response,
         state   TYPE string,
         mensaje TYPE string,
       END OF ty_response.
DATA: lo_request      TYPE REF TO if_rest_entity.
DATA: lv_response     TYPE string.
DATA: ls_response     TYPE ty_response.
DATA: ls_statfeco     TYPE zsdt_statfeco2.
DATA: ls_request      TYPE zfe_dian_json.
DATA: ls_anticipo_url TYPE zfi_anticipo_url.
DATA: ls_anticipo_log TYPE zfi_anticipo_log.
DATA: ls_bsid         TYPE ty_partida.
DATA: ls_bsid1        TYPE ty_partida.
DATA: lt_bsid         TYPE TABLE OF ty_partida.
DATA: lt_bsid1        TYPE TABLE OF ty_partida.
DATA: lv_indicador    TYPE i.
DATA: ls_kna1         TYPE kna1.
DATA: lv_fecha        TYPE sy-datum.
DATA: ls_vbrk         TYPE vbrk.
DATA: ls_vbak         TYPE vbak.
DATA: lt_vbap         TYPE TABLE OF vbap.
DATA: ls_vbap         TYPE vbap.
DATA: lt_vbkd         TYPE TABLE OF vbkd.
DATA: ls_vbkd         TYPE vbkd.
DATA: lv_netwr        LIKE ls_vbrk-netwr.
DATA: lv_clieant      TYPE kunnr.
DATA: lv_clienue      TYPE kunnr.
DATA: lv_wrbtr        TYPE wrbtr.

SELECT SINGLE * FROM zfi_anticipo_url
                INTO ls_anticipo_url
               WHERE mandt_type EQ sy-sysid.

* lv_token = lv_str_token.
* lv_url = 'http://10.10.70.108:9098/api/Movimiento2/ReporteMovimiento2'.
* lv_url = 'http://10.10.70.143:9091/api/Movimiento2/ReporteMovimiento2'.
lv_url = ls_anticipo_url-url.

json_nc-username = ls_anticipo_url-username.                   "'A1902821E710A95147710821B834DA54'.
json_nc-password = ls_anticipo_url-password.                   "'572252C820B8B177414821D94EE670063A71'.
json_nc-aplicationid = ls_anticipo_url-aplicationid.           "'6C939773BA58'.
lv_fecha = p_fecha.

REFRESH lt_bsid1.
SELECT a~kunnr a~belnr a~vbeln a~kunnr a~blart a~kkber a~wrbtr a~waers a~shkzg FROM bsid AS a
   INTO CORRESPONDING FIELDS OF TABLE lt_bsid1
 WHERE a~budat = lv_fecha
   AND a~hkont IN so_saknr.

SELECT a~kunnr a~belnr a~vbeln a~kunnr a~blart a~kkber a~wrbtr a~waers a~shkzg FROM bsad AS a
   APPENDING CORRESPONDING FIELDS OF TABLE lt_bsid1
 WHERE a~budat = lv_fecha
   AND a~hkont IN so_saknr.

*SELECT a~kunnr a~belnr a~vbeln a~kunnr a~blart b~fkart a~kkber a~wrbtr a~waers a~shkzg FROM bsid AS a
*  INNER JOIN vbrk AS b
*     ON a~vbeln = b~vbeln
*   APPENDING CORRESPONDING FIELDS OF TABLE lt_bsid1
* WHERE a~budat = lv_fecha
*   AND a~hkont IN so_saknr.

*SELECT a~kunnr a~belnr a~vbeln a~kunnr a~blart b~fkart a~kkber a~wrbtr a~waers a~shkzg FROM bsad AS a
*  INNER JOIN vbrk AS b
*     ON a~vbeln = b~vbeln
*  APPENDING CORRESPONDING FIELDS OF TABLE lt_bsid1
* WHERE a~budat = lv_fecha
*   AND a~hkont IN so_saknr.

REFRESH lt_bsid.
IF lt_bsid1[] IS NOT INITIAL.
  SELECT a~kunnr a~belnr a~vbeln a~kunnr a~blart a~kkber a~wrbtr a~waers a~shkzg FROM bsid AS a
    INTO CORRESPONDING FIELDS OF TABLE lt_bsid
 FOR ALL ENTRIES IN lt_bsid1
   WHERE a~budat <= lv_fecha
     AND a~hkont IN so_saknr
     AND a~kunnr = lt_bsid1-kunnr.
*     AND a~belnr = lt_bsid1-belnr.
ENDIF.

*SELECT a~kunnr a~belnr a~vbeln a~kunnr a~blart a~kkber a~wrbtr a~waers a~shkzg FROM bsad AS a
*   APPENDING CORRESPONDING FIELDS OF TABLE lt_bsid
*  FOR ALL ENTRIES IN lt_bsid1
* WHERE a~budat <= lv_fecha
*   AND a~hkont IN so_saknr
*   AND a~kunnr = lt_bsid1-kunnr
*   AND a~belnr = lt_bsid1-belnr.
*
*SELECT a~kunnr a~belnr a~vbeln a~kunnr a~blart b~fkart a~kkber a~wrbtr a~waers a~shkzg FROM bsid AS a
*  INNER JOIN vbrk AS b
*     ON a~vbeln = b~vbeln
*   APPENDING CORRESPONDING FIELDS OF TABLE lt_bsid
*  FOR ALL ENTRIES IN lt_bsid1
* WHERE a~budat <= lv_fecha
*   AND a~hkont IN so_saknr
*   AND a~kunnr = lt_bsid1-kunnr
*   AND a~belnr = lt_bsid1-belnr.
*
*SELECT a~kunnr a~belnr a~vbeln a~kunnr a~blart b~fkart a~kkber a~wrbtr a~waers a~shkzg FROM bsad AS a
*  INNER JOIN vbrk AS b
*     ON a~vbeln = b~vbeln
*  APPENDING CORRESPONDING FIELDS OF TABLE lt_bsid
*  FOR ALL ENTRIES IN lt_bsid1
* WHERE a~budat <= lv_fecha
*   AND a~hkont IN so_saknr
*   AND a~kunnr = lt_bsid1-kunnr
*   AND a~belnr = lt_bsid1-belnr.

CLEAR: json_nc-id_cliente,
       json_nc-valor.
SORT lt_bsid BY kunnr ASCENDING.
LOOP AT lt_bsid INTO ls_bsid.
  IF ls_bsid-vbeln <> '0' OR ls_bsid-vbeln IS INITIAL.
    SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_bsid1 FROM bsid WHERE blart = 'DZ' AND kkber = 'SE01' AND kunnr = ls_bsid-kunnr.
    IF sy-subrc <> 0.
      SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_bsid1 FROM bsad WHERE blart = 'DZ' AND kkber = 'SE01' AND kunnr = ls_bsid-kunnr.
    ENDIF.
    IF sy-subrc = 0.
      SELECT SINGLE * FROM kna1 INTO ls_kna1 WHERE kunnr = ls_bsid-kunnr.
      lv_clienue = ls_kna1-sortl.
      IF json_nc-id_cliente <> lv_clienue AND json_nc-id_cliente IS NOT INITIAL.
*          IF ls_bsid-vbeln IS INITIAL.
*            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*              EXPORTING
*                input  = ls_bsid-belnr
*              IMPORTING
*                output = json_nc-numero_documento.
*          ELSE.
*            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*              EXPORTING
*                input  = ls_bsid-vbeln
*              IMPORTING
*                output = json_nc-numero_documento.
*          ENDIF.
*          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*            EXPORTING
*              input  = ls_bsid-belnr
*            IMPORTING
*              output = json_nc-numero_documento.
        json_nc-numero_documento = 'VF01'.

        json_nc-tipo_documento = 9.
        ls_vbrk-netwr = lv_netwr = ls_bsid-wrbtr.
        IF ls_vbrk-netwr = 0.
          CONTINUE.
        ENDIF.
        lv_clieant = json_nc-id_cliente.
        SELECT SINGLE * FROM zfi_anticipo_log INTO ls_anticipo_log
         WHERE kunnr = lv_clieant
           AND fecha = lv_fecha
           AND wrbtr = lv_wrbtr.
        IF sy-subrc <> 0.
          CONCATENATE lv_fecha(4) '-' lv_fecha+4(2) '-' lv_fecha+6(2) 'T' sy-uzeit(2) ':' sy-uzeit+2(2) ':' sy-uzeit+4(2) '.000Z'
                 INTO json_nc-fecha_creacion.
          json_nc-descripcion_movimiento = 'Saldo Actual Cliente SAP'.
          lv_str_json = /ui2/cl_json=>serialize( data = json_nc compress = abap_true pretty_name = /ui2/cl_json=>pretty_mode-camel_case ).
          REPLACE 'idCliente' IN lv_str_json WITH 'id_Cliente'.
          REPLACE 'numeroDocumento' IN lv_str_json WITH 'numero_Documento'.
          REPLACE 'tipoDocumento' IN lv_str_json WITH 'tipo_Documento'.
          REPLACE 'fechaCreacion' IN lv_str_json WITH 'fecha_Creacion'.
          REPLACE 'descripcionMovimiento' IN lv_str_json WITH 'descripcion_Movimiento'.

          CLEAR: lv_string, lv_str_token.
          cl_http_client=>create_by_url(
               EXPORTING
                 url                = lv_url
               IMPORTING
                 client             = lo_http_client
               EXCEPTIONS
                 argument_not_found = 1
                 plugin_not_active  = 2
                 internal_error     = 3
                 OTHERS             = 4 ).

          "* - Rest client for token
          CREATE OBJECT lo_rest_client EXPORTING io_http_client = lo_http_client.
          lo_http_client->request->set_content_type( 'application/json' ).
          lo_request = lo_rest_client->if_rest_client~create_request_entity( ).
          lo_request->set_header_field( iv_name = 'Content-Type' iv_value = 'application/json' ).

          "Meter JSON
          lo_request->set_content_type( iv_media_type = if_rest_media_type=>gc_appl_json ).
          lo_request->set_string_data( lv_str_json ).
          lo_rest_client->if_rest_resource~post( lo_request ).
          lo_response = lo_rest_client->if_rest_client~get_response_entity( ).
          lv_http_status = lo_response->get_header_field( '~status_code' ).
          IF sy-subrc = 0.
            ls_anticipo_log-kunnr = lv_clieant.
            ls_anticipo_log-belnr = ls_bsid-belnr.
            ls_anticipo_log-vbeln = ls_bsid-vbeln.
            ls_anticipo_log-fecha = p_fecha.
            ls_anticipo_log-wrbtr = lv_wrbtr.
            ls_anticipo_log-waers = ls_bsid-waers.
            ls_anticipo_log-enviado = 'X'.
            MODIFY zfi_anticipo_log FROM ls_anticipo_log.
          ENDIF.
          lv_response = lo_response->get_string_data( ).
          lv_api_rest_respond = lv_response.
          IF sy-subrc EQ 0.
* Leer valores Json y transformarlo a structrura definida
            /ui2/cl_json=>deserialize( EXPORTING json = lv_response CHANGING data = ls_response ).

*           ls_loganticipos- = ls_response-.
*           INSERT INTO zsdt_loganticipos VALUES @ls_loganticipos.

*           IF sy-batch NE 'X'.

*             WRITE: / lv_http_status.
*             WRITE: / ls_request-message.

*           ENDIF.
          ENDIF.
        ENDIF.
        json_nc-valor = ls_bsid-wrbtr * 100.
        lv_wrbtr = ls_bsid-wrbtr.
      ELSE.
        json_nc-valor = json_nc-valor + ls_bsid-wrbtr * 100.
        lv_wrbtr = lv_wrbtr + ls_bsid-wrbtr.
      ENDIF.
      json_nc-id_cliente = ls_kna1-sortl.
    ENDIF.
  ENDIF.
ENDLOOP.
IF json_nc-valor > 0.
  lv_clieant = json_nc-id_cliente.
  SELECT SINGLE * FROM zfi_anticipo_log INTO ls_anticipo_log
   WHERE kunnr = lv_clieant
     AND fecha = p_fecha
     AND wrbtr = lv_wrbtr.
  IF sy-subrc <> 0.
    json_nc-tipo_documento = 9.
    CONCATENATE lv_fecha(4) '-' lv_fecha+4(2) '-' lv_fecha+6(2) 'T' sy-uzeit(2) ':' sy-uzeit+2(2) ':' sy-uzeit+4(2) '.000Z'
           INTO json_nc-fecha_creacion.
    json_nc-numero_documento = 'VF01'.
    json_nc-descripcion_movimiento = 'Saldo Actual Cliente SAP'.
    lv_str_json = /ui2/cl_json=>serialize( data = json_nc compress = abap_true pretty_name = /ui2/cl_json=>pretty_mode-camel_case ).
    REPLACE 'idCliente' IN lv_str_json WITH 'id_Cliente'.
    REPLACE 'numeroDocumento' IN lv_str_json WITH 'numero_Documento'.
    REPLACE 'tipoDocumento' IN lv_str_json WITH 'tipo_Documento'.
    REPLACE 'fechaCreacion' IN lv_str_json WITH 'fecha_Creacion'.
    REPLACE 'descripcionMovimiento' IN lv_str_json WITH 'descripcion_Movimiento'.

    CLEAR: lv_string, lv_str_token.
    cl_http_client=>create_by_url(
         EXPORTING
           url                = lv_url
         IMPORTING
           client             = lo_http_client
         EXCEPTIONS
           argument_not_found = 1
           plugin_not_active  = 2
           internal_error     = 3
           OTHERS             = 4 ).

    "* - Rest client for token
    CREATE OBJECT lo_rest_client EXPORTING io_http_client = lo_http_client.
    lo_http_client->request->set_content_type( 'application/json' ).
    lo_request = lo_rest_client->if_rest_client~create_request_entity( ).
    lo_request->set_header_field( iv_name = 'Content-Type' iv_value = 'application/json' ).

    "Meter JSON
    lo_request->set_content_type( iv_media_type = if_rest_media_type=>gc_appl_json ).
    lo_request->set_string_data( lv_str_json ).
    lo_rest_client->if_rest_resource~post( lo_request ).
    lo_response = lo_rest_client->if_rest_client~get_response_entity( ).
    lv_http_status = lo_response->get_header_field( '~status_code' ).
    IF sy-subrc = 0.
      ls_anticipo_log-kunnr = lv_clieant.
      ls_anticipo_log-belnr = ls_bsid-belnr.
      ls_anticipo_log-vbeln = ls_bsid-vbeln.
      ls_anticipo_log-fecha = p_fecha.
      ls_anticipo_log-wrbtr = lv_wrbtr.
      ls_anticipo_log-waers = ls_bsid-waers.
      ls_anticipo_log-enviado = 'X'.
      MODIFY zfi_anticipo_log FROM ls_anticipo_log.
    ENDIF.
    lv_response = lo_response->get_string_data( ).
    lv_api_rest_respond = lv_response.
    IF sy-subrc EQ 0.
* Leer valores Json y transformarlo a structrura definida
      /ui2/cl_json=>deserialize( EXPORTING json = lv_response CHANGING data = ls_response ).

*     ls_loganticipos- = ls_response-.
*     INSERT INTO zsdt_loganticipos VALUES @ls_loganticipos.

*     IF sy-batch NE 'X'.

*       WRITE: / lv_http_status.
*       WRITE: / ls_request-message.

*     ENDIF.
    ENDIF.
    CLEAR: json_nc-valor.
  ENDIF.
ENDIF.
COMMIT WORK AND WAIT.

*TYPES: BEGIN OF ty_nc,
*         username               TYPE string,
*         password               TYPE string,
*         aplicationid           TYPE string,
*         id_cliente             TYPE string,
*         numero_documento       TYPE string,
*         tipo_documento         TYPE numc01,
*         fecha_creacion         TYPE string,
*         valor                  TYPE numc10,
*         descripcion_movimiento TYPE string,
*       END OF ty_nc.
*DATA: lv_string           TYPE string.
*DATA: lv_str_json         TYPE string.
*DATA: lv_str_token        TYPE string.
*DATA: lv_api_rest_respond TYPE string.
*DATA: json_nc             TYPE ty_nc.
*DATA: Ls_bsis             TYPE bsis.
*DATA: Lt_bsis             TYPE TABLE OF bsis.
*DATA: LV_INDICADOR        TYPE I.
*LV_INDICADOR = 0.
*while LV_INDICADOR = 0.
*ENDWHILE.
*REFRESH Lt_bsis.  "KKBER
*SELECT * FROM BSIS
*  INTO CORRESPONDING FIELDS OF TABLE Lt_bsis
* WHERE ( BLART = 'ZPND' OR BLART = 'S1' OR BLART = 'ZNC1' OR BLART = 'AT' ) AND BUDAT = lv_fecha.
*SELECT * FROM BSAS
*  APPENDING CORRESPONDING FIELDS OF TABLE Lt_bsis
* WHERE ( BLART = 'ZPND' OR BLART = 'S1' OR BLART = 'ZNC1' OR BLART = 'AT' ) AND BUDAT = lv_fecha.
*json_nc-username = 'A1902821E710A95147710821B834DA54'.
*json_nc-password = '572252C820B8B177414821D94EE670063A71'.
*json_nc-aplicationid = '6C939773BA58'.
*json_nc-id_cliente = '812007194'.
*json_nc-numero_documento = '0025'.
*json_nc-tipo_documento = 1.
*json_nc-fecha_creacion = '2022-10-20T20:50:02.910Z'.
*json_nc-valor = 600000.
*json_nc-descripcion_movimiento = 'Prueba 4'.
*lv_str_json = /ui2/cl_json=>serialize( data = json_nc compress = abap_true pretty_name = /ui2/cl_json=>pretty_mode-camel_case ).
*REPLACE 'idCliente' IN lv_str_json WITH 'id_Cliente'.
*REPLACE 'numeroDocumento' IN lv_str_json WITH 'numero_Documento'.
*REPLACE 'tipoDocumento' IN lv_str_json WITH 'tipo_Documento'.
*REPLACE 'fechaCreacion' IN lv_str_json WITH 'fecha_Creacion'.
*REPLACE 'descripcionMovimiento' IN lv_str_json WITH 'descripcion_Movimiento'.
*
*CLEAR: lv_string, lv_str_token.
*PERFORM f_post_api_rest USING lv_str_token lv_str_json CHANGING lv_api_rest_respond.
*
*FORM f_post_api_rest  USING    p_str_token p_str_json
*                      CHANGING p_api_rest_respond.
*
*  DATA: wf_user TYPE string .
*  DATA: wf_password TYPE string .
*  DATA: rlength TYPE i,
*        txlen   TYPE string.
*  DATA: lo_http_client TYPE REF TO if_http_client .
*  DATA: wf_string TYPE string .
*  DATA: wf_string1 TYPE string .
*  DATA: wf_proxy TYPE string,
*        wf_port  TYPE string,
*        lv_url   TYPE string,
*        lv_token TYPE string.
*  DATA: lo_rest_client TYPE REF TO cl_rest_http_client,
*        lo_response    TYPE REF TO if_rest_entity,
*        lv_http_status TYPE i.
*
*  DATA lo_request   TYPE REF TO if_rest_entity.
*  DATA lv_response  TYPE string.
*  DATA: ls_statfeco TYPE zsdt_statfeco2.
*  DATA: ls_request  TYPE zfe_dian_json.
*  DATA: ls_statfeco_repgraph TYPE zsdt_statfeco.
*
**  SELECT SINGLE url FROM zsd_feco_url
**                    INTO lv_url
**                   WHERE mandt_type EQ sy-sysid
**                     AND zvbtyp     EQ gv_zvbtyp.
*
**  IF sy-subrc <> 0.
**    MESSAGE text-a01 TYPE 'E'.
**  ELSE.
*  lv_token = p_str_token.
**  lv_url = 'http://10.10.70.108:9098/api/Movimiento2/ReporteMovimiento2'.
*  lv_url = 'http://10.10.70.143:9091/api/Movimiento2/ReporteMovimiento2'.
*
*  cl_http_client=>create_by_url(
*       EXPORTING
*         url                = lv_url
*       IMPORTING
*         client             = lo_http_client
*       EXCEPTIONS
*         argument_not_found = 1
*         plugin_not_active  = 2
*         internal_error     = 3
*         OTHERS             = 4 ).
*
*  "* - Rest client for token
*  CREATE OBJECT lo_rest_client EXPORTING io_http_client = lo_http_client.
*  lo_http_client->request->set_content_type( 'application/json' ).
*  lo_request = lo_rest_client->if_rest_client~create_request_entity( ).
**  lo_request->set_header_field( iv_name = 'AuthorizedToken' iv_value = lv_token ).
**  lo_request->set_header_field( iv_name = 'User' iv_value = json_nc-username ).
*  lo_request->set_header_field( iv_name = 'Content-Type' iv_value = 'application/json' ).
*
*  "Meter JSON
*  lo_request->set_content_type( iv_media_type = if_rest_media_type=>gc_appl_json ).
*  lo_request->set_string_data( p_str_json ).
*  lo_rest_client->if_rest_resource~post( lo_request ).
*  lo_response = lo_rest_client->if_rest_client~get_response_entity( ).
*  lv_http_status = lo_response->get_header_field( '~status_code' ).
*  lv_response = lo_response->get_string_data( ).
*  p_api_rest_respond = lv_response.
*  IF sy-subrc EQ 0.
** Leer valores Json y transformarlo a structrura definida
*    /ui2/cl_json=>deserialize( EXPORTING json = lv_response CHANGING data = ls_request ).
*
**      ls_statfeco_repgraph-cufe = ls_request-cufe.
**      INSERT INTO zsdt_statfeco2 VALUES @ls_statfeco.
*
*    IF lv_http_status EQ 200.
*
*      MODIFY zsdt_statfeco FROM @ls_statfeco_repgraph.
*
*    ENDIF.
*
*    IF sy-batch NE 'X'.
*
*      WRITE: / lv_http_status.
*      WRITE: / ls_request-message.
*
*    ENDIF.
*
*  ENDIF.
**  ENDIF.

**DATA: lo_http_client     TYPE REF TO if_http_client,
**         lo_rest_client     TYPE REF TO cl_rest_http_client,
**         lv_url             TYPE        string,
**         http_status        TYPE        string,
*  DATA:     lv_body            TYPE        string.
*
*  lv_url = 'http://10.10.70.143:9091/api/Movimiento2/ReporteMovimiento2'.
*
*  cl_http_client=>create_by_url(
*       EXPORTING
*         url                = lv_url
*       IMPORTING
*         client             = lo_http_client
*       EXCEPTIONS
*         argument_not_found = 1
*         plugin_not_active  = 2
*         internal_error     = 3
*         OTHERS             = 4 ).
*
*  CREATE OBJECT lo_rest_client
*    EXPORTING
*      io_http_client = lo_http_client.
*  lo_http_client->request->set_version( if_http_request=>co_protocol_version_1_0 ).
*  IF lo_http_client IS BOUND AND lo_rest_client IS BOUND.
*    cl_http_utility=>set_request_uri(
*      EXPORTING
*        request = lo_http_client->request    " HTTP Framework (iHTTP) HTTP Request
*        uri     = lv_url                     " URI String (in the Form of /path?query-string)
*    ).
** ABAP to JSON
*    DATA lr_json_serializer   TYPE REF TO cl_trex_json_serializer.
*    CREATE OBJECT lr_json_serializer EXPORTING data = json_nc.
*    lr_json_serializer->serialize( ).
*    lv_body = lr_json_serializer->get_data( ).
*    lv_body = lv_str_json.
** Or you can use this class as well
** lv_body = /ui2/cl_json=>serialize( data = json_req ).
** Converted JSON should look like this
** lv_body = '{ "salesorder":"25252525", "type":"Direct"}'.
*    DATA: lo_json        TYPE REF TO cl_clb_parse_json,
**           lo_response    TYPE REF TO if_rest_entity,
**           lo_request     TYPE REF TO if_rest_entity,
*          lo_sql         TYPE REF TO cx_sy_open_sql_db,
*          status         TYPE  string,
*          reason         TYPE  string,
*          response       TYPE  string,
*          content_length TYPE  string,
*          location       TYPE  string,
*          content_type   TYPE  string,
*          lv_status      TYPE  i.
**         lv_token       TYPE string.
**   lv_token = ''.
** Set Payload or body ( JSON or XML)
*    lo_request = lo_rest_client->if_rest_client~create_request_entity( ).
*    lo_request->set_content_type( iv_media_type = if_rest_media_type=>gc_appl_json ).
*    lo_request->set_string_data( lv_body ).
**CALL METHOD lo_rest_client->if_rest_client~set_request_header
**       EXPORTING
**         iv_name  = 'auth-token'
**         iv_value = lv_token. "Set your header .
** POST
*    lo_rest_client->if_rest_resource~post( lo_request ).
** Collect response
*    lo_response = lo_rest_client->if_rest_client~get_response_entity( ).
*    lv_http_status = lv_status = lo_response->get_header_field( '~status_code' ).
*    reason = lo_response->get_header_field( '~status_reason' ).
*    content_length = lo_response->get_header_field( 'content-length' ).
*    location = lo_response->get_header_field( 'location' ).
*    content_type = lo_response->get_header_field( 'content-type' ).
*    response = lo_response->get_string_data( ).
*  ENDIF.
*ENDFORM.